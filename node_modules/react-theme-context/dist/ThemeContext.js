"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const kebab_case_1 = tslib_1.__importDefault(require("@queso/kebab-case"));
const react_1 = tslib_1.__importStar(require("react"));
/**
 * Creates `React.Context` for a theme, exposes its `Provider` as well as some
 * utility functions and hooks for getting and setting the theme.
 */
class ThemeContext {
    constructor(defaultTheme) {
        this.Context = react_1.createContext([
            defaultTheme,
            /* istanbul ignore next */
            () => { },
        ]);
        this.Provider = props => {
            const [theme, setTheme] = react_1.useState(defaultTheme);
            return (react_1.default.createElement(this.Context.Provider, { value: [theme, setTheme] }, props.children));
        };
    }
    /**
     * Converts a theme `property` into [CSS custom property](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) syntax.
     * @example
     * themeContext.prop('primaryColor')
     * // 'var(--primary-color)'
     */
    prop(property) {
        return `var(--${kebab_case_1.default(property)})`;
    }
    /**
     * Sets theme properties as [CSS custom properties](https://developer.mozilla.org/en-US/docs/Web/CSS/--*)
     * on the provided `element` or the root `documentElement` by default.
     * If the theme is updated, these props are updated too.
     * This enables live theme switching!
     * @suggestion use inside your root `App` component.
     * @example
     * const App = () => {
     * 	themeContext.useLayoutEffect()
     * 	return null
     *	}
     */
    useLayoutEffect({ classNames, element = document.documentElement, } = {}) {
        element.classList.add(...(classNames || []));
        const [theme, setTheme] = this.use();
        react_1.useLayoutEffect(() => {
            Object.keys(theme).forEach(setProp);
        }, [theme]);
        return [theme, setTheme];
        function setProp(key) {
            element.style.setProperty(`--${kebab_case_1.default(key)}`, theme[key]);
        }
    }
    /**
     * @returns the result of [`React.useContext`](https://reactjs.org/docs/hooks-reference.html#usecontext).
     * @example
     * const [theme, setTheme] = themeContext.use()
     */
    use() {
        return react_1.useContext(this.Context);
    }
}
exports.default = ThemeContext;
