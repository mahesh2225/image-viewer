import React, { Dispatch, FC, SetStateAction } from 'react';
/**
 * Creates `React.Context` for a theme, exposes its `Provider` as well as some
 * utility functions and hooks for getting and setting the theme.
 */
export default class ThemeContext<T extends object> {
    private Context;
    /**
     * @see https://reactjs.org/docs/context.html#contextprovider
     */
    Provider: FC;
    constructor(defaultTheme: T);
    /**
     * Converts a theme `property` into [CSS custom property](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) syntax.
     * @example
     * themeContext.prop('primaryColor')
     * // 'var(--primary-color)'
     */
    prop(property: keyof T): string;
    /**
     * Sets theme properties as [CSS custom properties](https://developer.mozilla.org/en-US/docs/Web/CSS/--*)
     * on the provided `element` or the root `documentElement` by default.
     * If the theme is updated, these props are updated too.
     * This enables live theme switching!
     * @suggestion use inside your root `App` component.
     * @example
     * const App = () => {
     * 	themeContext.useLayoutEffect()
     * 	return null
     *	}
     */
    useLayoutEffect({ classNames, element, }?: {
        element?: HTMLElement;
        classNames?: string[];
    }): [T, Dispatch<SetStateAction<T>>];
    /**
     * @returns the result of [`React.useContext`](https://reactjs.org/docs/hooks-reference.html#usecontext).
     * @example
     * const [theme, setTheme] = themeContext.use()
     */
    use(): [T, React.Dispatch<React.SetStateAction<T>>];
}
